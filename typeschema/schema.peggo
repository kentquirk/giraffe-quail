// This is a parser file for parsing graphql's type definition schema.
// It is designed to be consumed by pigeon.
// (see https://godoc.org/github.com/PuerkitoBio/pigeon)
//
// A couple of notes if you're thinking of contributing:
// The intent is to keep this file as minimal as possible and
// to put as much supporting code into .go files as can be reasonably
// managed.
//
// Format-wise, we're using a style that works pretty well for YACC grammars.
// Namely, we enclose choice expressions in () and then align these, plus the different
// options for a choice expression (which are separated by /) all to the same column.
// The code blocks are indented further than these elements.
// One-line definitions can be placed on one line.

{
    package typeschema

    import "github.com/kentquirk/giraffe-quail/types"
}

// Documents
Document <- Definition+ _ EOF

Definition <-
    ( ObjTypeDefinition
    / EnumDefinition
    / InterfaceDefinition
    / UnionDefinition
    )

ObjTypeDefinition <- _ "type" _ n:Name i:Implements? fs:FieldSet {
        fields := make([]types.Field, 0)
        for _, f := range fs.([]types.Field) {
            fields = append(fields, f)
        }
        return TR.RegisterWithFields(n.(string), types.Obj, fields)
    }

EnumDefinition <- _ "enum" _ n:Name vals:EnumValueSet {
        enumname := n.(string)
        enumtype, err := TR.Register(enumname, types.Enum)
        if err != nil {
            return enumtype, err
        }
        for _, v := range vals.([]string) {
            enumvalue := v
            _, err := VR.Register(enumvalue, types.Value{T:enumtype, V:enumvalue})
            if err != nil {
                return enumtype, err
            }
        }
        return enumtype, nil
    }


InterfaceDefinition <- _ "interface" _ n:Name fs:FieldSet {
        fields := make([]types.Field, 0)
        for _, f := range fs.([]types.Field) {
            fields = append(fields, f)
        }
        return TR.RegisterWithFields(n.(string), types.Interface, fields)
    }

UnionDefinition <- _ "union" _ n:Name us:UnionSet {
        unionname := n.(string)
        subtypes := us.([]types.Type)
        return TR.Register(unionname, types.Union, subtypes...)
    }

UnionSet <- _ "=" un:UnionNames { return un, nil }

UnionNames <-
    ( _ fn:Name mn:AnotherName+ {
            firstname := fn.(string)
            firsttype, err := TR.MaybeGet(firstname)
            types := []types.Type{firsttype}
            if err != nil {
                return types, err
            }
            morenames := mn.([]interface{})
            for _, n := range morenames {
                t, err := TR.MaybeGet(n.(string))
                if err != nil {
                    return types, err
                }
                types = append(types, t)
            }
            return types, nil
        }
    / _ fn:Name {
            firstname := fn.(string)
            firsttype, _ := TR.MaybeGet(firstname)
            types := []types.Type{firsttype}
            return types, errors.New("A union must specify at least two types.")
        }
    )


// Implements can only have the name of an Object Type
Implements <- _ "implements" _ n:Name {
        return TR.MaybeGet(n.(string))
    }

EnumValueSet <- _ "{" ev:EnumValues _ "}" { return ev, nil }

EnumValues <- evs:EnumValue+ {
    r := make([]string, 0)
    for _, n := range evs.([]interface{}) {
        r = append(r, n.(string))
    }
    return r, nil
}

EnumValue <- _ n:Name { return n.(string), nil }

AnotherName <- _ "|" _ n:Name { return n.(string), nil }

FieldSet <-  _ "{" fields:Field+ _ "}" {
        fa := make([]types.Field, 0)
        for _, f := range fields.([]interface{}) {
            fa = append(fa, f.(types.Field))
        }
        return fa, nil
    }

Field <- _ n:Name args:Arguments? _ ":" t:Type {
        if args == nil {
            return types.Field{N: n.(string), T:t.(types.Type)}, nil
        }
        return types.Field{N: n.(string), Args:args.([]types.Field), T:t.(types.Type)}, nil
    }

Arguments <- _ '(' args:Argument+ _ ')' {
        fields := make([]types.Field, 0)
        for _, a := range args.([]interface{}) {
            fields = append(fields, a.(types.Field))
        }
        return fields, nil
    }

Argument <- _ n:Name _ ':' t:Type {
        name := n.(string)
        typ := t.(types.Type)
        return types.Field{N: name, T: typ}, nil
    }


Type <-
    ( NonNullType
    / ListType
    / NamedType
    )

NamedType <- _ n:Name { return TR.MaybeGet(n.(string)) }

ListType <- _ '[' _ t:Type _ ']' { return TR.MaybeGet(types.TypeNameFor(types.List, t.(types.Type).Key())) }

NonNullType <-
    ( t:ListType '!'  { return TR.MaybeGet(types.TypeNameFor(types.NonNullable, t.(types.Type).Key())) }
    / t:NamedType '!' { return TR.MaybeGet(types.TypeNameFor(types.NonNullable, t.(types.Type).Key())) }
    )


// Ignored Tokens
_ <- I*
I "Ignored" <-
   ( UnicodeBOM
   / WhiteSpace
   / LineTerminator
   / Comment
   / Comma
   )

// Here are the character classes

UnicodeBOM "ByteOrderMark" <-
    '\uFEFF'

LineTerminator "EOL" <-
    ( '\n'
    / '\r' !'\n'
    / '\r' '\n'
    )

WhiteSpace <- [ \t]
Comment <- '#' .* !LineTerminator
Comma <- ','
Name <- [_A-Za-z][_0-9A-Za-z]* { return string(c.text), nil }

EOF = !.