{
    package main

    func main() {
        r, err := Parse("whatever", []byte("Howdy"))
        fmt.Println(err)
        fmt.Printf("%#v\n", r)
    }
}

// Documents
Document <-
    ( Definition+ EOF
    )

Definition <-
    ( OperationDefinition
    / FragmentDefinition
    )

OperationDefinition <-
    ( OperationType Name? VariableDefinitions? Directives? SelectionSet
    / SelectionSet
    )

OperationType <-
    ( "query"
    / "mutation"
    )

SelectionSet <- '{' Selection+ '}'

Selection <-
    ( Field
    / FragmentSpread
    / InlineFragment
    )

Field <- Alias? Name Arguments? Directives? SelectionSet?

Arguments <- '(' Argument+ ')'

Argument <- Name ':' Value

Alias <- Name ':'

FragmentSpread <- "..." FragmentName Directives?

FragmentDefinition <- "fragment" FragmentName TypeCondition Directives? SelectionSet

FragmentName <- Name    // but not 'on'

TypeCondition <- "on" NamedType

InlineFragment <- "..." TypeCondition? Directives? SelectionSet

// Values
IntValue <- IntegerPart
IntegerPart <-
    ( NegativeSign? '0'
    / NegativeSign? NonZeroDigit Digit*
    )

FloatValue <-
    ( IntegerPart FractionalPart
    / IntegerPart ExponentPart
    / IntegerPart FractionalPart ExponentPart
    )
FractionalPart <- '.' Digit+
ExponentPart <- ExponentIndicator Sign? Digit+

BooleanValue <-
    ( "true"
    / "false"
    )

StringValue <-
    ( Quote Quote
    / Quote StringCharacter+ Quote
    )

StringCharacter <-
    // 'SourceCharacter but not " or \ or LineTerminator'
    ( [\u0009\u0020\u0021\u0023-\u005B\u005D-\uFFFF]
    / '\\' 'u' EscapedUnicode
    / '\\' EscapedCharacter
    )

NullValue <- "null"

EnumValue <- Name   // but not true, false, or null

ListValue <-
    ( '[' ']'
    / '[' Value+ ']'
    )

ObjectValue <-
    ( '{' '}'
    / '{' ObjectField+ '}'
    )

ObjectField <- Name ':' Value

// Variables
Variable <- '$' Name

VariableDefinitions <- '(' VariableDefinition+ ')'

VariableDefinition <- Variable ':' Type DefaultValue?

DefaultValue <- '=' Value

// Types
Type <-
    ( NamedType
    / ListType
    / NonNullType
    )

NamedType <- Name
ListType <- '[' Type ']'
NonNullType <-
    ( NamedType '!'
    / ListType '!'
    )

// Directives
Directives <- Directive+

Directive <- '@' Name Arguments?


// Lexical Tokens:
Token <-
    ( Punctuator
    / Name
    / IntValue
    / FloatValue
    / StringValue
    )

// Ignored Tokens
_ "Ignored" <-
   ( UnicodeBOM
   / WhiteSpace
   / LineTerminator
   / Comment
   / Comma
   )

// Here are the character classes

SourceCharacter <-
    [\u0009\n\u000D\u0020-\uFFFF]

UnicodeBOM "ByteOrderMark" <-
    '\uFEFF'

LineTerminator "EOL" <-
    ( '\n'
    / '\r' !'\n'
    / '\r' '\n'
    )

WhiteSpace <- [ \t]*
Comment <- '#' .* !LineTerminator
Comma <- ','
NegativeSign <- '-'
Digit <- [0-9]
NonZeroDigit <- [1-9]
ExponentIndicator <- [eE]
Sign <- [+-]
Quote <- '"'
EscapedUnicode <- [0-9A-Fa-f]//{4}
EscapedCharacter <- ["\\/bfnrt]

Punctuator <-
    ( [!$():=@[\]{|}]
    / "..."
    )

Name <- [_A-Za-z][_0-9A-Za-z]*

EOF = !.