{
    package main
}

// Documents
Document <-
    ( Definition+ _ EOF
    )

Definition <-
    ( OperationDefinition
    / FragmentDefinition
    )

OperationDefinition <-
    ( OperationType _ Name? VariableDefinitions? Directives? SelectionSet
    / SelectionSet
    )

OperationType <-
    ( _ "query"
    / _ "mutation"
    )

SelectionSet <- _ '{' Selection+ _ '}'

Selection <-
    ( Field
    / FragmentSpread
    / InlineFragment
    )

Field <- Alias? _ Name Arguments? Directives? SelectionSet?

Arguments <- _ '(' Argument+ _ ')'

Argument <- _ Name _ ':' _ Value

Alias <- _ Name _ ':'

FragmentSpread <- _ "..." FragmentName Directives?

FragmentDefinition <- _ "fragment" FragmentName TypeCondition Directives? SelectionSet

FragmentName <- _ Name    // but not 'on'

TypeCondition <- _ "on" _ NamedType

InlineFragment <- _ "..." TypeCondition? Directives? SelectionSet

// Values
Value <-
    ( Variable
    / IntValue
    / FloatValue
    / StringValue
    / BooleanValue
    / NullValue
    / EnumValue
    / ListValue
    / ObjectValue
    )

IntValue <- IntegerPart
IntegerPart <-
    ( NegativeSign? '0'
    / NegativeSign? NonZeroDigit Digit*
    )

FloatValue <-
    ( IntegerPart FractionalPart
    / IntegerPart ExponentPart
    / IntegerPart FractionalPart ExponentPart
    )
FractionalPart <- '.' Digit+
ExponentPart <- ExponentIndicator Sign? Digit+

BooleanValue <-
    ( _ "true"
    / _ "false"
    )

StringValue <-
    ( _ '"' '"'
    / _ '"' StringCharacter+ '"'
    )

StringCharacter <-
    // 'SourceCharacter but not " or \ or LineTerminator'
    ( [\u0009\u0020\u0021\u0023-\u005B\u005D-\uFFFF]
    / '\\' 'u' EscapedUnicode
    / '\\' EscapedCharacter
    )

NullValue <- _ "null"

EnumValue <- Name   // but not true, false, or null

ListValue <-
    ( _ '[' _ ']'
    / _ '[' (_ Value)+ ']'
    )

ObjectValue <-
    ( _ '{' _ '}'
    / _ '{' ObjectField+ _ '}'
    )

ObjectField <- _ Name _ ':' _ Value

// Variables
Variable <- _ '$' Name

VariableDefinitions <- _ '(' _ VariableDefinition+ _ ')'

VariableDefinition <- _ Variable _ ':' _ Type DefaultValue?

DefaultValue <- _ '=' _ Value

// Types
Type <-
    ( NamedType
    / ListType
    / NonNullType
    )

NamedType <- Name
ListType <- _ '[' _ Type _ ']'
NonNullType <-
    ( NamedType '!'
    / ListType '!'
    )

// Directives
Directives <- Directive+

Directive <- _ '@' Name _ Arguments?


// Lexical Tokens:
Token <-
    ( Punctuator
    / Name
    / IntValue
    / FloatValue
    / StringValue
    )

// Ignored Tokens
_ <- I*
I "Ignored" <-
   ( UnicodeBOM
   / WhiteSpace
   / LineTerminator
   / Comment
   / Comma
   )

// Here are the character classes

SourceCharacter <-
    [\u0009\n\u000D\u0020-\uFFFF]

UnicodeBOM "ByteOrderMark" <-
    '\uFEFF'

LineTerminator "EOL" <-
    ( '\n'
    / '\r' !'\n'
    / '\r' '\n'
    )

WhiteSpace <- [ \t]
Comment <- '#' .* !LineTerminator
Comma <- ','
NegativeSign <- '-'
Digit <- [0-9]
NonZeroDigit <- [1-9]
ExponentIndicator <- [eE]
Sign <- [+-]
EscapedUnicode <- [0-9A-Fa-f]//{4}
EscapedCharacter <- ["\\/bfnrt]

Punctuator <-
    ( [!$():=@[\]{|}]
    / "..."
    )

Name <- [_A-Za-z][_0-9A-Za-z]*

EOF = !.